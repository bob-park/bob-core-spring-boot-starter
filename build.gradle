plugins {
    id 'java'
    id("maven-publish")
}

group = 'org.bobpark'
version = '0.0.3'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

ext {
    lombokVersion = '1.18.32'
    queryDslVersion = '5.0.0'

    springBootParentVersion = '3.2.5'
    springSecurityVersion = "6.2.4"

}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootParentVersion}"
    implementation "org.springframework.security:spring-security-core:${springSecurityVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springSecurityVersion}"

    // spring data jpa
    implementation "org.springframework.data:spring-data-jpa:${springBootParentVersion}"

    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootParentVersion}"


    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // apache common
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.11.0'

    // guava
    implementation 'com.google.guava:guava:31.1-jre'

    // hibernate
    implementation 'org.hibernate.orm:hibernate-core:6.2.13.Final'

    // querydsl
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api:2.1.1'

    implementation("com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta")
    annotationProcessor("com.querydsl:querydsl-apt:${queryDslVersion}:jakarta")
    testAnnotationProcessor("com.querydsl:querydsl-apt:${queryDslVersion}:jakarta")

}

tasks.named('test') {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/bob-park/bob-core-spring-boot-starter")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }

    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}